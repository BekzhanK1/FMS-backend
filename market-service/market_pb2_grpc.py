# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import market_pb2 as market__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in market_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CategoryServiceStub(object):
    """Category Service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCategory = channel.unary_unary(
            "/market.CategoryService/GetCategory",
            request_serializer=market__pb2.GetCategoryRequest.SerializeToString,
            response_deserializer=market__pb2.CategoryResponse.FromString,
            _registered_method=True,
        )
        self.ListCategories = channel.unary_unary(
            "/market.CategoryService/ListCategories",
            request_serializer=market__pb2.ListCategoriesRequest.SerializeToString,
            response_deserializer=market__pb2.ListCategoriesResponse.FromString,
            _registered_method=True,
        )
        self.CreateCategory = channel.unary_unary(
            "/market.CategoryService/CreateCategory",
            request_serializer=market__pb2.CreateCategoryRequest.SerializeToString,
            response_deserializer=market__pb2.CategoryResponse.FromString,
            _registered_method=True,
        )
        self.UpdateCategory = channel.unary_unary(
            "/market.CategoryService/UpdateCategory",
            request_serializer=market__pb2.UpdateCategoryRequest.SerializeToString,
            response_deserializer=market__pb2.CategoryResponse.FromString,
            _registered_method=True,
        )
        self.DeleteCategory = channel.unary_unary(
            "/market.CategoryService/DeleteCategory",
            request_serializer=market__pb2.DeleteCategoryRequest.SerializeToString,
            response_deserializer=market__pb2.DeleteCategoryResponse.FromString,
            _registered_method=True,
        )


class CategoryServiceServicer(object):
    """Category Service"""

    def GetCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListCategories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CategoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetCategory": grpc.unary_unary_rpc_method_handler(
            servicer.GetCategory,
            request_deserializer=market__pb2.GetCategoryRequest.FromString,
            response_serializer=market__pb2.CategoryResponse.SerializeToString,
        ),
        "ListCategories": grpc.unary_unary_rpc_method_handler(
            servicer.ListCategories,
            request_deserializer=market__pb2.ListCategoriesRequest.FromString,
            response_serializer=market__pb2.ListCategoriesResponse.SerializeToString,
        ),
        "CreateCategory": grpc.unary_unary_rpc_method_handler(
            servicer.CreateCategory,
            request_deserializer=market__pb2.CreateCategoryRequest.FromString,
            response_serializer=market__pb2.CategoryResponse.SerializeToString,
        ),
        "UpdateCategory": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateCategory,
            request_deserializer=market__pb2.UpdateCategoryRequest.FromString,
            response_serializer=market__pb2.CategoryResponse.SerializeToString,
        ),
        "DeleteCategory": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteCategory,
            request_deserializer=market__pb2.DeleteCategoryRequest.FromString,
            response_serializer=market__pb2.DeleteCategoryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "market.CategoryService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("market.CategoryService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class CategoryService(object):
    """Category Service"""

    @staticmethod
    def GetCategory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.CategoryService/GetCategory",
            market__pb2.GetCategoryRequest.SerializeToString,
            market__pb2.CategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListCategories(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.CategoryService/ListCategories",
            market__pb2.ListCategoriesRequest.SerializeToString,
            market__pb2.ListCategoriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateCategory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.CategoryService/CreateCategory",
            market__pb2.CreateCategoryRequest.SerializeToString,
            market__pb2.CategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateCategory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.CategoryService/UpdateCategory",
            market__pb2.UpdateCategoryRequest.SerializeToString,
            market__pb2.CategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteCategory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.CategoryService/DeleteCategory",
            market__pb2.DeleteCategoryRequest.SerializeToString,
            market__pb2.DeleteCategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ProductServiceStub(object):
    """Product Service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProduct = channel.unary_unary(
            "/market.ProductService/GetProduct",
            request_serializer=market__pb2.GetProductRequest.SerializeToString,
            response_deserializer=market__pb2.ProductResponse.FromString,
            _registered_method=True,
        )
        self.ListProducts = channel.unary_unary(
            "/market.ProductService/ListProducts",
            request_serializer=market__pb2.ListProductsRequest.SerializeToString,
            response_deserializer=market__pb2.ListProductsResponse.FromString,
            _registered_method=True,
        )
        self.CreateProduct = channel.unary_unary(
            "/market.ProductService/CreateProduct",
            request_serializer=market__pb2.CreateProductRequest.SerializeToString,
            response_deserializer=market__pb2.ProductResponse.FromString,
            _registered_method=True,
        )
        self.UpdateProduct = channel.unary_unary(
            "/market.ProductService/UpdateProduct",
            request_serializer=market__pb2.UpdateProductRequest.SerializeToString,
            response_deserializer=market__pb2.ProductResponse.FromString,
            _registered_method=True,
        )
        self.DeleteProduct = channel.unary_unary(
            "/market.ProductService/DeleteProduct",
            request_serializer=market__pb2.DeleteProductRequest.SerializeToString,
            response_deserializer=market__pb2.DeleteProductResponse.FromString,
            _registered_method=True,
        )


class ProductServiceServicer(object):
    """Product Service"""

    def GetProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ProductServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetProduct": grpc.unary_unary_rpc_method_handler(
            servicer.GetProduct,
            request_deserializer=market__pb2.GetProductRequest.FromString,
            response_serializer=market__pb2.ProductResponse.SerializeToString,
        ),
        "ListProducts": grpc.unary_unary_rpc_method_handler(
            servicer.ListProducts,
            request_deserializer=market__pb2.ListProductsRequest.FromString,
            response_serializer=market__pb2.ListProductsResponse.SerializeToString,
        ),
        "CreateProduct": grpc.unary_unary_rpc_method_handler(
            servicer.CreateProduct,
            request_deserializer=market__pb2.CreateProductRequest.FromString,
            response_serializer=market__pb2.ProductResponse.SerializeToString,
        ),
        "UpdateProduct": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateProduct,
            request_deserializer=market__pb2.UpdateProductRequest.FromString,
            response_serializer=market__pb2.ProductResponse.SerializeToString,
        ),
        "DeleteProduct": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteProduct,
            request_deserializer=market__pb2.DeleteProductRequest.FromString,
            response_serializer=market__pb2.DeleteProductResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "market.ProductService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("market.ProductService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class ProductService(object):
    """Product Service"""

    @staticmethod
    def GetProduct(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ProductService/GetProduct",
            market__pb2.GetProductRequest.SerializeToString,
            market__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListProducts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ProductService/ListProducts",
            market__pb2.ListProductsRequest.SerializeToString,
            market__pb2.ListProductsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateProduct(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ProductService/CreateProduct",
            market__pb2.CreateProductRequest.SerializeToString,
            market__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateProduct(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ProductService/UpdateProduct",
            market__pb2.UpdateProductRequest.SerializeToString,
            market__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteProduct(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ProductService/DeleteProduct",
            market__pb2.DeleteProductRequest.SerializeToString,
            market__pb2.DeleteProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class BasketServiceStub(object):
    """Basket Service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBasket = channel.unary_unary(
            "/market.BasketService/GetBasket",
            request_serializer=market__pb2.GetBasketRequest.SerializeToString,
            response_deserializer=market__pb2.BasketResponse.FromString,
            _registered_method=True,
        )
        self.AddBasketItem = channel.unary_unary(
            "/market.BasketService/AddBasketItem",
            request_serializer=market__pb2.AddBasketItemRequest.SerializeToString,
            response_deserializer=market__pb2.BasketResponse.FromString,
            _registered_method=True,
        )
        self.RemoveBasketItem = channel.unary_unary(
            "/market.BasketService/RemoveBasketItem",
            request_serializer=market__pb2.RemoveBasketItemRequest.SerializeToString,
            response_deserializer=market__pb2.BasketResponse.FromString,
            _registered_method=True,
        )
        self.CheckoutBasket = channel.unary_unary(
            "/market.BasketService/CheckoutBasket",
            request_serializer=market__pb2.CheckoutBasketRequest.SerializeToString,
            response_deserializer=market__pb2.OrderResponse.FromString,
            _registered_method=True,
        )


class BasketServiceServicer(object):
    """Basket Service"""

    def GetBasket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddBasketItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveBasketItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckoutBasket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BasketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetBasket": grpc.unary_unary_rpc_method_handler(
            servicer.GetBasket,
            request_deserializer=market__pb2.GetBasketRequest.FromString,
            response_serializer=market__pb2.BasketResponse.SerializeToString,
        ),
        "AddBasketItem": grpc.unary_unary_rpc_method_handler(
            servicer.AddBasketItem,
            request_deserializer=market__pb2.AddBasketItemRequest.FromString,
            response_serializer=market__pb2.BasketResponse.SerializeToString,
        ),
        "RemoveBasketItem": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveBasketItem,
            request_deserializer=market__pb2.RemoveBasketItemRequest.FromString,
            response_serializer=market__pb2.BasketResponse.SerializeToString,
        ),
        "CheckoutBasket": grpc.unary_unary_rpc_method_handler(
            servicer.CheckoutBasket,
            request_deserializer=market__pb2.CheckoutBasketRequest.FromString,
            response_serializer=market__pb2.OrderResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "market.BasketService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("market.BasketService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class BasketService(object):
    """Basket Service"""

    @staticmethod
    def GetBasket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.BasketService/GetBasket",
            market__pb2.GetBasketRequest.SerializeToString,
            market__pb2.BasketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AddBasketItem(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.BasketService/AddBasketItem",
            market__pb2.AddBasketItemRequest.SerializeToString,
            market__pb2.BasketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RemoveBasketItem(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.BasketService/RemoveBasketItem",
            market__pb2.RemoveBasketItemRequest.SerializeToString,
            market__pb2.BasketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CheckoutBasket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.BasketService/CheckoutBasket",
            market__pb2.CheckoutBasketRequest.SerializeToString,
            market__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class OrderServiceStub(object):
    """Order Service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrder = channel.unary_unary(
            "/market.OrderService/GetOrder",
            request_serializer=market__pb2.GetOrderRequest.SerializeToString,
            response_deserializer=market__pb2.OrderResponse.FromString,
            _registered_method=True,
        )
        self.ListOrders = channel.unary_unary(
            "/market.OrderService/ListOrders",
            request_serializer=market__pb2.ListOrdersRequest.SerializeToString,
            response_deserializer=market__pb2.ListOrdersResponse.FromString,
            _registered_method=True,
        )
        self.CreateOrder = channel.unary_unary(
            "/market.OrderService/CreateOrder",
            request_serializer=market__pb2.CreateOrderRequest.SerializeToString,
            response_deserializer=market__pb2.OrderResponse.FromString,
            _registered_method=True,
        )
        self.UpdateOrderStatus = channel.unary_unary(
            "/market.OrderService/UpdateOrderStatus",
            request_serializer=market__pb2.UpdateOrderStatusRequest.SerializeToString,
            response_deserializer=market__pb2.OrderResponse.FromString,
            _registered_method=True,
        )


class OrderServiceServicer(object):
    """Order Service"""

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetOrder": grpc.unary_unary_rpc_method_handler(
            servicer.GetOrder,
            request_deserializer=market__pb2.GetOrderRequest.FromString,
            response_serializer=market__pb2.OrderResponse.SerializeToString,
        ),
        "ListOrders": grpc.unary_unary_rpc_method_handler(
            servicer.ListOrders,
            request_deserializer=market__pb2.ListOrdersRequest.FromString,
            response_serializer=market__pb2.ListOrdersResponse.SerializeToString,
        ),
        "CreateOrder": grpc.unary_unary_rpc_method_handler(
            servicer.CreateOrder,
            request_deserializer=market__pb2.CreateOrderRequest.FromString,
            response_serializer=market__pb2.OrderResponse.SerializeToString,
        ),
        "UpdateOrderStatus": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateOrderStatus,
            request_deserializer=market__pb2.UpdateOrderStatusRequest.FromString,
            response_serializer=market__pb2.OrderResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "market.OrderService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("market.OrderService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Order Service"""

    @staticmethod
    def GetOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.OrderService/GetOrder",
            market__pb2.GetOrderRequest.SerializeToString,
            market__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.OrderService/ListOrders",
            market__pb2.ListOrdersRequest.SerializeToString,
            market__pb2.ListOrdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.OrderService/CreateOrder",
            market__pb2.CreateOrderRequest.SerializeToString,
            market__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateOrderStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.OrderService/UpdateOrderStatus",
            market__pb2.UpdateOrderStatusRequest.SerializeToString,
            market__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ImageServiceStub(object):
    """Image Service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListImagesByProduct = channel.unary_unary(
            "/market.ImageService/ListImagesByProduct",
            request_serializer=market__pb2.ListImagesByProductRequest.SerializeToString,
            response_deserializer=market__pb2.ListImagesResponse.FromString,
            _registered_method=True,
        )
        self.AddImage = channel.unary_unary(
            "/market.ImageService/AddImage",
            request_serializer=market__pb2.AddImageRequest.SerializeToString,
            response_deserializer=market__pb2.ImageResponse.FromString,
            _registered_method=True,
        )
        self.DeleteImage = channel.unary_unary(
            "/market.ImageService/DeleteImage",
            request_serializer=market__pb2.DeleteImageRequest.SerializeToString,
            response_deserializer=market__pb2.DeleteImageResponse.FromString,
            _registered_method=True,
        )


class ImageServiceServicer(object):
    """Image Service"""

    def ListImagesByProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListImagesByProduct": grpc.unary_unary_rpc_method_handler(
            servicer.ListImagesByProduct,
            request_deserializer=market__pb2.ListImagesByProductRequest.FromString,
            response_serializer=market__pb2.ListImagesResponse.SerializeToString,
        ),
        "AddImage": grpc.unary_unary_rpc_method_handler(
            servicer.AddImage,
            request_deserializer=market__pb2.AddImageRequest.FromString,
            response_serializer=market__pb2.ImageResponse.SerializeToString,
        ),
        "DeleteImage": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteImage,
            request_deserializer=market__pb2.DeleteImageRequest.FromString,
            response_serializer=market__pb2.DeleteImageResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "market.ImageService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("market.ImageService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """Image Service"""

    @staticmethod
    def ListImagesByProduct(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ImageService/ListImagesByProduct",
            market__pb2.ListImagesByProductRequest.SerializeToString,
            market__pb2.ListImagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AddImage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ImageService/AddImage",
            market__pb2.AddImageRequest.SerializeToString,
            market__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteImage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/market.ImageService/DeleteImage",
            market__pb2.DeleteImageRequest.SerializeToString,
            market__pb2.DeleteImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
